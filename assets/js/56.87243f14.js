(window.webpackJsonp=window.webpackJsonp||[]).push([[56],{418:function(v,_,e){"use strict";e.r(_);var t=e(7),s=Object(t.a)({},(function(){var v=this,_=v._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("h1",{attrs:{id:"一-git-是什么"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#一-git-是什么"}},[v._v("#")]),v._v(" 一：Git 是什么？")]),v._v(" "),_("div",{staticClass:"language- line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[v._v("  Git是目前世界上最先进的分布式版本控制系统。\n")])]),v._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[v._v("1")]),_("br")])]),v._v(" "),_("h1",{attrs:{id:"二-svn-与-git-的最主要的区别"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#二-svn-与-git-的最主要的区别"}},[v._v("#")]),v._v(" 二：SVN 与 Git 的最主要的区别?")]),v._v(" "),_("p",[_("code",[v._v("SVN")]),v._v(" 为集中式版本控制系统，版本库是集中存放在中央服务器的\n单独搭建 "),_("code",[v._v("SVN")]),v._v(" 服务器，不能离线工作\n操作简单，代码保密性较强")]),v._v(" "),_("p",[_("code",[v._v("GIT")]),v._v(" 为分布式版本控制系统根本没有“中央服务器”，每个人的电脑上都是一个完整的版本库\n适合分布式开发，强调个体\n公共服务器压力和数据量都不会太大\n速度快灵活\n可以离线工作\n操作复杂，代码保密性差")]),v._v(" "),_("p",[_("code",[v._v("GitHub")]),v._v(",免费的远程仓库，如果是个人的开源项目，放到 "),_("code",[v._v("GitHub")]),v._v(" 上是完全没有问题的。"),_("code",[v._v("GitHub")]),v._v(" 还是一个开源协作社区，通过 "),_("code",[v._v("GitHub")]),v._v("，既可以让别人参与你的开源项目，也可以参与别人的开源项目。")]),v._v(" "),_("p",[_("code",[v._v("SVN")]),v._v(" 的存储需要依赖一个服务器，而 "),_("code",[v._v("git")]),v._v(" 所有的东西是放在线上的。节约成本，省时省力。")]),v._v(" "),_("p",[_("code",[v._v("'Please tell me who you are.'")])]),v._v(" "),_("p",[v._v("查看全局配置   "),_("code",[v._v("git config --global --list")])]),v._v(" "),_("p",[v._v("命令   "),_("code",[v._v('git config --global user.name "你的 git 名称"')]),v._v("\n命令   "),_("code",[v._v('git config --global user.email "你的 git 验证邮箱"')])]),v._v(" "),_("p",[_("code",[v._v("git")]),v._v(" 命令行中的操作命令：\n命令  "),_("code",[v._v("cd D:")]),v._v("   进入 相应的磁盘\n命令  "),_("code",[v._v("mkdir")]),v._v("   创建目录\n命令  "),_("code",[v._v("cd")]),v._v(" 进入当前盘符中的文件夹\n命令  "),_("code",[v._v("pwd")]),v._v(" 显示当前工作目录的全路径\n命令  "),_("code",[v._v("rm")]),v._v("   删除文件\n命令  "),_("code",[v._v("ls")]),v._v(" 查看文件夹下的子文件")]),v._v(" "),_("p",[v._v("然后！最重要的步骤来了！！"),_("code",[v._v("git init")])]),v._v(" "),_("p",[v._v("命令  "),_("code",[v._v("git init")]),v._v("\n显示成功后去相应的文件夹中查看是不是多了一个"),_("code",[v._v(".git")]),v._v(" 文件")]),v._v(" "),_("div",{staticClass:"language- line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[v._v("这个文件夹就是你的版本库了，把项目放在文件夹下。\n")])]),v._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[v._v("1")]),_("br")])]),_("hr"),v._v(" "),_("h1",{attrs:{id:"三-将文件提交到-git-服务器。"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#三-将文件提交到-git-服务器。"}},[v._v("#")]),v._v(" 三.将文件提交到 git 服务器。")]),v._v(" "),_("p",[v._v("你的本地仓库由 "),_("code",[v._v("git")]),v._v(" 维护的三棵“树”组成：\n　　第一个是你的 工作目录，它持有实际文件；\n　　第二个是 暂存区"),_("code",[v._v("（Index）")]),v._v("，临时保存你的改动；\n　　最后是 "),_("code",[v._v("HEAD")]),v._v("，指向你最近一次提交后的结果。")]),v._v(" "),_("h2",{attrs:{id:"_1-打开-git-bash"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-打开-git-bash"}},[v._v("#")]),v._v(" 1.打开 Git Bash")]),v._v(" "),_("p",[v._v("命令 "),_("code",[v._v("git add ‘文件名’")]),v._v(" "),_("code",[v._v("git add -u")]),v._v("   提交所有被修改"),_("code",[v._v("(modified)")]),v._v("和被删除"),_("code",[v._v("(deleted)")]),v._v("文件，不包括新文件"),_("code",[v._v("(new)")]),v._v(" "),_("code",[v._v("git add .")]),v._v("  提交所有新文件"),_("code",[v._v("(new)")]),v._v("和被修改"),_("code",[v._v("(modified)")]),v._v("文件，不包括被删除"),_("code",[v._v("(deleted)")]),v._v("文件\n"),_("code",[v._v("git add -A")]),v._v("   提交所有变化")]),v._v(" "),_("p",[v._v("把咱们的文件存放在一个神秘的地方 "),_("code",[v._v(">>>> 暂存区")]),v._v(" （暂存区在本机）")]),v._v(" "),_("h2",{attrs:{id:"_2-把文件提交到本地仓库中去。"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-把文件提交到本地仓库中去。"}},[v._v("#")]),v._v(" 2.把文件提交到本地仓库中去。")]),v._v(" "),_("p",[_("code",[v._v("git commit -m '我提交时候的备注（注释）'")])]),v._v(" "),_("h2",{attrs:{id:"_3-查看-commit-状态"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-查看-commit-状态"}},[v._v("#")]),v._v(" 3.查看 commit 状态")]),v._v(" "),_("p",[_("code",[v._v("git status")]),v._v("   用于显示工作目录和暂存区的状态。")]),v._v(" "),_("h2",{attrs:{id:"_4-查看修改内容。"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_4-查看修改内容。"}},[v._v("#")]),v._v(" 4.查看修改内容。")]),v._v(" "),_("p",[_("code",[v._v("git diff")]),v._v(" 你的文件名   会出现更改信息；\n将更改后的东西提交上去，和之前一样。先 "),_("code",[v._v("add")]),v._v(" 然后再 "),_("code",[v._v("commit")]),v._v(" 。")]),v._v(" "),_("h2",{attrs:{id:"_5-版本退回"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_5-版本退回"}},[v._v("#")]),v._v(" 5.版本退回")]),v._v(" "),_("p",[_("code",[v._v("git log")]),v._v("          （ 查看日志）\n"),_("code",[v._v("git reflog")])]),v._v(" "),_("p",[_("code",[v._v("git reset --hard HEAD^")]),v._v("   退回到上个版本 如果需要退回好多版本就在后面加上 ^ 例： "),_("code",[v._v("git reset --hard HEAD^^")]),v._v("退回两个版本。\n"),_("code",[v._v("git reset --hard 191e0c7")]),v._v("   回退到指定版本")]),v._v(" "),_("h2",{attrs:{id:"_6-删除"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_6-删除"}},[v._v("#")]),v._v(" 6.删除")]),v._v(" "),_("p",[v._v("新建一个 "),_("code",[v._v("b.txt")]),v._v("，然后"),_("code",[v._v("commit")]),v._v(" 到库中。 并删除。")]),v._v(" "),_("p",[v._v("命令 1. "),_("code",[v._v("git add")])]),v._v(" "),_("p",[v._v("命令 2. "),_("code",[v._v("git commit -m ‘备注’")])]),v._v(" "),_("p",[v._v("命令 3. "),_("code",[v._v("rm b.txt")]),v._v("   这个是删除"),_("code",[v._v("b")]),v._v("文件的命令")]),v._v(" "),_("p",[v._v("回过头来看文件夹中的 "),_("code",[v._v("b.txt")])]),v._v(" "),_("p",[_("code",[v._v("b.txt")]),v._v(" 不见了，查看下状态。\n可以 "),_("code",[v._v("commit")]),v._v("，可以放弃修改"),_("code",[v._v("git reset --hard")]),v._v(" 版本号来回复文件。")]),v._v(" "),_("h2",{attrs:{id:"_7-连接远程仓库"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_7-连接远程仓库"}},[v._v("#")]),v._v(" 7.连接远程仓库")]),v._v(" "),_("ol",[_("li",[_("code",[v._v("git init")]),v._v("   -> 创建版本库")]),v._v(" "),_("li",[_("code",[v._v("git add 文件名")]),v._v("   -> 添加到暂存区")]),v._v(" "),_("li",[_("code",[v._v("git commit -m '提交注释'")]),v._v("   ->提交到本地仓库")])]),v._v(" "),_("p",[v._v("然后连接本地仓库，并将自己的库 push 到服务器中去。")]),v._v(" "),_("ol",[_("li",[v._v("命令 1. "),_("code",[v._v("git remote add origin https: // github.com/")]),v._v("你的账号/你的项目名称   设置远程仓库地址")]),v._v(" "),_("li",[v._v("命令 2. "),_("code",[v._v("git push -u origin master")]),v._v(" 将本地的库推送到 "),_("code",[v._v("master")]),v._v(" 分支 （就是推送到服务器上）")])]),v._v(" "),_("p",[_("code",[v._v("git push -u -f origin master")]),v._v("(提交到远程仓库，这个命令中的 "),_("code",[v._v("-f")]),v._v(" 是强制推送，因为远程仓库只有初始化的文件，所以强制推送上去就行了，不加"),_("code",[v._v("-f")]),v._v(" 会报当前分支没有远程分支，强制推送可以覆盖 "),_("code",[v._v("master")]),v._v("，这样就完成了第一次提交的步骤)")]),v._v(" "),_("p",[_("code",[v._v("git remote -v")]),v._v("   查看远程仓库地址\n"),_("code",[v._v("git remote rm origin")]),v._v("   删除远程仓库地址")]),v._v(" "),_("p",[v._v("在服务器上查看是否推送成功。")]),v._v(" "),_("p",[v._v("从现在开始，只需要 "),_("code",[v._v("git push")]),v._v(" 就可以把本机的代码提交到远程仓库。\n"),_("code",[v._v("git push")]),v._v("     (提交 "),_("code",[v._v("master")]),v._v(" 分支 到远程仓库)\n"),_("code",[v._v("git push origin")]),v._v(" 分支名     (提交其他分支 到远程仓库)")]),v._v(" "),_("p",[v._v("获取远程仓库的更新数据：\n"),_("code",[v._v("git fetch")]),v._v("：相当于是从远程获取最新到本地，不会自动 "),_("code",[v._v("merge")]),v._v(" "),_("code",[v._v("git pull")]),v._v("：相当于是从远程获取最新版本并 merge 到本地\n"),_("code",[v._v("git pull origin 分支名")]),v._v("   更新某个远程分支到本地")]),v._v(" "),_("p",[v._v("从服务器克隆数据， "),_("code",[v._v("git clone")]),v._v(" "),_("code",[v._v("git clone")]),v._v(" "),_("a",{attrs:{href:"https://github.com/yanghuaizhi1210/GitTest",target:"_blank",rel:"noopener noreferrer"}},[v._v("https://github.com/yanghuaizhi1210/GitTest"),_("OutboundLink")],1),v._v("\n将服务器端的数据克隆过来。")]),v._v(" "),_("p",[v._v("如果输入"),_("code",[v._v("$ git remote add origin")]),v._v(" "),_("a",{attrs:{href:"mailto:git@github.com"}},[v._v("git@github.com")]),v._v(":djqiang（github 帐号名）/gitdemo（项目名）.git\n提示出错信息：fatal: remote origin already exists.\n解决办法如下：\n1、先输入"),_("code",[v._v("$ git remote rm origin")]),v._v("\n2、再输入"),_("code",[v._v("$ git remote add origin")]),v._v(" "),_("a",{attrs:{href:"mailto:git@github.com"}},[v._v("git@github.com")]),v._v(":djqiang/gitdemo.git 就不会报错了！\n3、如果输入"),_("code",[v._v("$ git remote rm origin")]),v._v(" 还是报错的话，error: Could not remove config section 'remote.origin'. 我们需要修改 gitconfig 文件的内容\n4、找到你的 "),_("code",[v._v("github")]),v._v(" 的安装路径，我的是 "),_("code",[v._v("C:\\Users\\ASUS\\AppData\\Local\\GitHub\\PortableGit_ca477551eeb4aea0e4ae9fcd3358bd96720bb5c8\\etc")]),v._v("\n5、找到一个名为 "),_("code",[v._v("gitconfig")]),v._v(" 的文件，打开它把里面的"),_("code",[v._v('[remote "origin"]')]),v._v("那一行删掉就好了！")]),v._v(" "),_("p",[v._v("生成秘钥：\n（1）首先检查电脑是否曾经生成过秘钥\n"),_("code",[v._v("cd ~/.ssh")]),v._v("\n若打开该文件夹为空，则表示没有生成过秘钥，进入第二步。（~表示根目录）\n(2) 生成秘钥\n"),_("code",[v._v('ssh-keygen -t rsa -C "your email"')]),v._v("\n命令要求输入密码，不用输，三个回车即可。\n执行成功后，会在主目录"),_("code",[v._v(".ssh")]),v._v(" 路径下生成两个文件："),_("code",[v._v("id_rsa")]),v._v(" 私钥文件；"),_("code",[v._v("id_rsa.pub")]),v._v(" 公钥文件；")]),v._v(" "),_("p",[v._v("登陆 "),_("code",[v._v("github")]),v._v(" 帐户点击头像，然后 "),_("code",[v._v("Settings -> 左栏点击 SSH and GPG keys -> 点击 New SSH key")]),v._v("\n在远程仓库 "),_("code",[v._v("gitlab")]),v._v(" 上添加 "),_("code",[v._v("title")]),v._v(" 和 "),_("code",[v._v("key")]),v._v("，和本地的一致。"),_("code",[v._v("title")]),v._v(" 可以自己取一个容易区分的名字，"),_("code",[v._v("key")]),v._v(" 为 "),_("code",[v._v("id_rsa.pub")]),v._v(" 中的内容（全部复制，可用 "),_("code",[v._v("cat id_rsa.pub")]),v._v(" 命令打开）")]),v._v(" "),_("p",[v._v("配置了 "),_("code",[v._v("ssh")]),v._v(" 秘钥，使用远程仓库的 "),_("code",[v._v("ssh")]),v._v(" 地址提交\n"),_("a",{attrs:{href:"https://www.cnblogs.com/superGG1990/p/6844952.html",target:"_blank",rel:"noopener noreferrer"}},[v._v("https://www.cnblogs.com/superGG1990/p/6844952.html"),_("OutboundLink")],1)]),v._v(" "),_("hr"),v._v(" "),_("h1",{attrs:{id:"分支操作"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#分支操作"}},[v._v("#")]),v._v(" 分支操作")]),v._v(" "),_("p",[v._v("查看分支："),_("code",[v._v("git branch")]),v._v("\n当前分支前有 "),_("code",[v._v("*")]),v._v(" 号")]),v._v(" "),_("p",[v._v("创建分支："),_("code",[v._v("git branch")])]),v._v(" "),_("p",[v._v("切换分支："),_("code",[v._v("git checkout")])]),v._v(" "),_("p",[v._v("创建+切换分支："),_("code",[v._v("git checkout -b")])]),v._v(" "),_("p",[v._v("合并某分支到当前分支："),_("code",[v._v("git merge")])]),v._v(" "),_("p",[v._v("删除分支："),_("code",[v._v("git branch -d")])]),v._v(" "),_("p",[_("strong",[v._v("合并分支：")])]),v._v(" "),_("p",[v._v("1、先建一个分支              "),_("code",[v._v("git branch")]),v._v(" 分支名")]),v._v(" "),_("p",[v._v("2、切换到新建的分支          "),_("code",[v._v("git checkout")]),v._v(" 分支名")]),v._v(" "),_("p",[v._v("3、提交分支上的代码          "),_("code",[v._v("git add .")]),v._v(" "),_("code",[v._v("git commit -m “提交注释”")])]),v._v(" "),_("p",[v._v("4、切换至主分支上            "),_("code",[v._v("git checkout master")])]),v._v(" "),_("p",[v._v("5、然后合并分支              "),_("code",[v._v("git merge 分支")]),v._v("\n6、合并完以后就 "),_("code",[v._v("push")]),v._v("          最好先 "),_("code",[v._v("pull")]),v._v(" 一次   然后 "),_("code",[v._v("git push")])]),v._v(" "),_("p",[v._v("7、切换到自己的分支          "),_("code",[v._v("git merge")]),v._v(" 线上分支名称")]),v._v(" "),_("p",[v._v("设置 "),_("code",[v._v("git")]),v._v(" 忽略文件： 1.创建文件："),_("code",[v._v(".gitignore")]),v._v(" 2.忽略文件列表")]),v._v(" "),_("h1",{attrs:{id:"gitignore-忽略文件列表"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#gitignore-忽略文件列表"}},[v._v("#")]),v._v(" .gitignore 忽略文件列表")]),v._v(" "),_("p",[_("code",[v._v(".DS_Store")]),v._v(" "),_("code",[v._v("node_modules/")]),v._v(" "),_("code",[v._v("/dist/")]),v._v(" "),_("code",[v._v("npm-debug.log*")]),v._v(" "),_("code",[v._v("yarn-debug.log*")]),v._v(" "),_("code",[v._v("yarn-error.log*")])]),v._v(" "),_("h1",{attrs:{id:"editor-directories-and-files"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#editor-directories-and-files"}},[v._v("#")]),v._v(" Editor directories and files")]),v._v(" "),_("p",[_("code",[v._v(".idea")]),v._v(" "),_("code",[v._v(".vscode")]),v._v(" "),_("code",[v._v("_.suo")]),v._v(" "),_("code",[v._v("*.ntvs*")]),v._v(" "),_("code",[v._v("_.njsproj")]),v._v(" "),_("code",[v._v("*.sln")])]),v._v(" "),_("p",[v._v("如果出现如：\n"),_("strong",[v._v("Please enter a commit message to explain why this merge is necessary,# especially if it merges an updated upstream into a topic branch.")])]),v._v(" "),_("div",{staticClass:"language- line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[v._v("“:wq”是Linux操作系统命令： 表示强制性写入文件并退出。\n输入“:wq”，注意是英文输入状态下的冒号，然后按下“Enter”键。\n")])]),v._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[v._v("1")]),_("br"),_("span",{staticClass:"line-number"},[v._v("2")]),_("br")])]),_("hr"),v._v(" "),_("h1",{attrs:{id:"git-submodule"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#git-submodule"}},[v._v("#")]),v._v(" Git Submodule")]),v._v(" "),_("p",[v._v("有的时候我们会遇到仓库嵌套的问题，即一个仓库内部还有一个 "),_("code",[v._v("git")]),v._v(" 仓库。这时就需要使用到 "),_("code",[v._v("git submodule")]),v._v(" 模块化。")]),v._v(" "),_("div",{staticClass:"language- line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[v._v("git submodule add 远程仓库地址  仓库名/\n")])]),v._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[v._v("1")]),_("br")])]),_("p",[v._v("执行此命令后会在外层仓库根目录下生成"),_("strong",[v._v("一个.gitmodules 文件")]),v._v("\n如果想删除模块的话，可以执行")]),v._v(" "),_("div",{staticClass:"language- line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[v._v("git rm -r --cached 远程仓库名/，并删除对应的.gitmodules文件中的模块信息\n")])]),v._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[v._v("1")]),_("br")])]),_("h1",{attrs:{id:"git-push-时遇到-rejected-master-master-non-fast-forward-的问题"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#git-push-时遇到-rejected-master-master-non-fast-forward-的问题"}},[v._v("#")]),v._v(" git push 时遇到：！[rejected] master -> master(non-fast-forward)的问题")]),v._v(" "),_("div",{staticClass:"language- line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[v._v("1. git pull origin master --allow-unrelated histories 把远程和本地同步，消除差异\n2. git add\n3. git commit -m\n4. git push origin master\n")])]),v._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[v._v("1")]),_("br"),_("span",{staticClass:"line-number"},[v._v("2")]),_("br"),_("span",{staticClass:"line-number"},[v._v("3")]),_("br"),_("span",{staticClass:"line-number"},[v._v("4")]),_("br")])]),_("h1",{attrs:{id:"git-stash"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#git-stash"}},[v._v("#")]),v._v(" git stash")]),v._v(" "),_("h2",{attrs:{id:"应用场景"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#应用场景"}},[v._v("#")]),v._v(" 应用场景")]),v._v(" "),_("blockquote",[_("ol",[_("li",[v._v("当正在 "),_("code",[v._v("dev")]),v._v(" 分支上开发某个项目，这时项目中出现一个 "),_("code",[v._v("bug")]),v._v("，需要紧急修复，但是正在开发的内容只是完成一半，还不想提交，这时可以用"),_("code",[v._v("git stash")]),v._v("命令将修改的内容保存至堆栈区，然后顺利切换到 "),_("code",[v._v("fix")]),v._v(" 分支进行 "),_("code",[v._v("bug")]),v._v(" 修复，修复完成后，再次切回到 "),_("code",[v._v("dev")]),v._v(" 分支，从堆栈中恢复刚刚保存的内容。")]),v._v(" "),_("li",[v._v("由于疏忽，本应该在 dev 分支开发的内容，却在 "),_("code",[v._v("master")]),v._v(" 上进行了开发，需要重新切回到 "),_("code",[v._v("dev")]),v._v(" 分支上进行开发，可以用"),_("code",[v._v("git stash")]),v._v("将内容保存至堆栈中，切回到 "),_("code",[v._v("dev")]),v._v(" 分支后，再次恢复内容即可。\n总的来说，"),_("code",[v._v("git stash")]),v._v("命令的作用就是将目前还不想提交的但是已经修改的内容进行保存至堆栈中，后续可以在某个分支上恢复出堆栈中的内容。这也就是说，"),_("code",[v._v("stash")]),v._v(" 中的内容不仅仅可以恢复到原先开发的分支，也可以恢复到其他任意指定的分支上。"),_("code",[v._v("git stash")]),v._v("作用的范围包括工作区和暂存区中的内容，也就是说没有提交的内容都会保存至堆栈中。")])])]),v._v(" "),_("h2",{attrs:{id:"常用的用法"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#常用的用法"}},[v._v("#")]),v._v(" 常用的用法")]),v._v(" "),_("ol",[_("li",[_("code",[v._v('git stash save "save message"')]),v._v(" : 执行存储时，添加备注，方便查找，只有 git stash 也要可以的，但查找时不方便识别。")]),v._v(" "),_("li",[_("code",[v._v("git stash list")]),v._v(" ：查看 "),_("code",[v._v("stash")]),v._v(" 了哪些存储")]),v._v(" "),_("li",[_("code",[v._v("git stash show")]),v._v(" ：显示做了哪些改动，默认 "),_("code",[v._v("show")]),v._v(" 第一个存储,如果要显示其他存贮，后面加 "),_("code",[v._v("stash@{$num}")]),v._v("，比如第二个 "),_("code",[v._v("git stash show stash@{1}")])]),v._v(" "),_("li",[_("code",[v._v("git stash show -p")]),v._v(" : 显示第一个存储的改动，如果想显示其他存存储，命令："),_("code",[v._v("git stash show stash@{$num} -p")]),v._v(" ，比如第二个："),_("code",[v._v("git stash show stash@{1} -p")])]),v._v(" "),_("li",[_("code",[v._v("git stash apply")]),v._v(" :应用某个存储,但不会把存储从存储列表中删除，默认使用第一个存储,即 "),_("code",[v._v("stash@{0}")]),v._v("，如果要使用其他个，"),_("code",[v._v("git stash apply stash@{$num}")]),v._v(" ， 比如第二个："),_("code",[v._v("git stash apply stash@{1}")])]),v._v(" "),_("li",[_("code",[v._v("git stash pop")]),v._v(" ：命令恢复之前缓存的工作目录，将缓存堆栈中的对应 "),_("code",[v._v("stash")]),v._v(" 删除，并将对应修改应用到当前的工作目录下,默认为第一个 "),_("code",[v._v("stash")]),v._v(",即 "),_("code",[v._v("stash@{0}")]),v._v("，如果要应用并删除其他 "),_("code",[v._v("stash")]),v._v("，命令："),_("code",[v._v("git stash pop stash@{$num}")]),v._v(" ，比如应用并删除第二个："),_("code",[v._v("git stash pop stash@{1}")])]),v._v(" "),_("li",[_("code",[v._v("git stash drop stash@{$num}")]),v._v(" ：丢弃"),_("code",[v._v("stash@{$num}")]),v._v("存储，从列表中删除这个存储")]),v._v(" "),_("li",[_("code",[v._v("git stash clear")]),v._v(" ：删除所有缓存的 "),_("code",[v._v("stash")])])]),v._v(" "),_("hr"),v._v(" "),_("h1",{attrs:{id:"svn-使用"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#svn-使用"}},[v._v("#")]),v._v(" SVN 使用")]),v._v(" "),_("p",[v._v("使用 "),_("code",[v._v("VisualSVN Server")]),v._v(" 建立版本库\n"),_("a",{attrs:{href:"https://www.cnblogs.com/lcyuhe/p/4539696.html",target:"_blank",rel:"noopener noreferrer"}},[v._v("https://www.cnblogs.com/lcyuhe/p/4539696.html"),_("OutboundLink")],1)])])}),[],!1,null,null,null);_.default=s.exports}}]);